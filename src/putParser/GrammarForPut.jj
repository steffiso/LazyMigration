/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = false;}PARSER_BEGIN(ParserForPut)package putParser;import java.io.BufferedReader;import java.io.File;import java.io.FileReader;import java.io.IOException;public class ParserForPut{  private static int zaehler = - 1;  private static int laenge = 0;  private static String [] attributes = null;  private static String ts = null;  private static void setCurrentSchema(String kind)  {    String schema = null;    final File filename = new File("data/" + kind + "Schema");    if (filename.exists())    {      BufferedReader br = null;      try      {        br = new BufferedReader(new FileReader(filename));        schema = br.readLine();      }      catch (IOException e)      {        e.printStackTrace();      }      finally      {        try        {          if (br != null) br.close();        }        catch (IOException ex)        {          ex.printStackTrace();        }      }    }    attributes = schema.split(",");    laenge = attributes.length;  }}PARSER_END(ParserForPut)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* Zeichen */{  < marks : "\"" >| < open : "{" >| < end : "}" >| < punkt : ":" >| < string : "'" (~[ "\'" ])* "'" >| < number :    (< digit >)+    (      "." (< digit >)+    )? >| < digit : [ "0"-"9" ] >| < kindValue :    < nameValue >    (      < nameValue >    | < digit >    )* >| < nameValue :    [ "a"-"z" ]  | [ "A"-"Z" ]  | "-"  | "_" >}String start() throws LengthException :{  String value = null;}{  value = getJSONString() < EOF >  {    return value;  }}String getJSONString() throws LengthException :{  Token kind = null;  String value = null;}{  (kind = < kindValue >)  {    setCurrentSchema(kind.toString());  }  "("  (    value = listOfValues("")  )?  ")"  {    if ((zaehler > (laenge + 1)) || (zaehler <= laenge)) throw new LengthException("Falsche Anzahl");    return "{" + value + ", \"ts\":" + ts + "}";  }}String listOfValues(String value) :{  Token valueOfToken = null;  String valueOfOtherToken = null;  String valueOne = "";  Boolean isTS = false;}{  (    valueOfToken = < string >  | valueOfToken = < number >  )  {    String name = null;    if (valueOfToken.kind == string)    {      name = valueOfToken.toString();      name = name.substring(1, name.length() - 1);      name = "\"" + name + "\"";    }    else name = valueOfToken.toString();    if (zaehler == (-1))    {      zaehler++;      valueOne = "\"id\":" + name;    }
    else if (zaehler < laenge)    {      valueOne = "\"" + attributes [ zaehler ].substring(1, attributes [ zaehler ].length()) + "\":" + name;      zaehler++;    }    else if (zaehler == laenge)    {      ts = name;      zaehler++;      isTS = true;    }        else    {      zaehler++;    }  }  (    ","    (      valueOfOtherToken = listOfValues(value)    )  )*  {    if (isTS) return null;    else if (valueOfOtherToken != null) return value + valueOne + ", " + valueOfOtherToken;    else return value + valueOne;  }}