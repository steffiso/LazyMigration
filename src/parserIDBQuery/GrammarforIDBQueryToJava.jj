/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = false;}PARSER_BEGIN(ParserIDBQueryToJava)package parserIDBQuery;import java.util.ArrayList;import bottomUp.Relation;import bottomUp.Query;import bottomUp.Condition;import bottomUp.Pair;public class ParserIDBQueryToJava{}PARSER_END(ParserIDBQueryToJava)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* Zeichen */{  < variable : "?" < kindValue >>| < string : "'" (~[ "'" ])* "'" >| < operators :    "<"  | ">"  | "!"  | "=" >| < number :    (< digit >)+    (      "." (< digit >)+    )? >| < digit : [ "0"-"9" ] >| < not : "not" >| < kindValue :    < nameValue >    (      < nameValue >    | < digit >    )* >| < nameValue :    [ "a"-"z" ]  | [ "A"-"Z" ]  | "-"  | "_" >}ArrayList < Query > start() :{  ArrayList < Query > querys = new ArrayList < Query > ();  Pair p = null;  Relation leftRelation = null;  Query q = null;}{  (    leftRelation = getRelation() ":-" p = getRelationList()    {      q = new Query(leftRelation, p.relations);      if (!p.conditions.isEmpty()) q.setConditions(p.conditions);      querys.add(q);    }    "."    (      (        leftRelation = getRelation() ":-" p = getRelationList()        {          q = new Query(leftRelation, p.relations);          if (!p.conditions.isEmpty()) q.setConditions(p.conditions);          querys.add(q);        }        "."      )    )*  )?  < EOF >  {    return querys;  }}Pair getRelationList() :{  ArrayList < Relation > values = new ArrayList < Relation > ();  ArrayList < Condition > conditions = new ArrayList < Condition > ();  Relation relation = null;  Condition condition = null;}{  (    (      (        relation = getRelation()        {          values.add(relation);        }      )    |      (        condition = getCondition()        {          conditions.add(condition);        }      )    )    (      ","      (        (          relation = getRelation()          {            values.add(relation);          }        )      |        (          condition = getCondition()          {            conditions.add(condition);          }        )      )    )*  )?  {    return new Pair(values, conditions);  }}Relation getRelation() :{  Token kind = null;  String value = null;  ArrayList < String > values = new ArrayList < String > ();  Relation relation = null;  boolean isNot = false;}{  (< not >  {    isNot = true;  }  )? (kind = < kindValue >) "("  (    value = getValue()    {      values.add(value);    }    (      ","      (        value = getValue()        {          values.add(value);        }      )    )*  )?  ")"  {    relation = new Relation(kind.toString(), values.size(), values);    if (isNot) relation.setNot(true);    return relation;  }}Condition getCondition() :{  Token right = null;  Token left = null;  Token operator = null;}{  left = < variable > operator = < operators > right = < variable >  {    Condition con = new Condition(left.toString(), right.toString(), operator.toString());    return con;  }}String getValue() :{  Token valueOfToken = null;}{  (    valueOfToken = < variable >  | valueOfToken = < number >
  | valueOfToken = < string >  )  {    return valueOfToken.toString();  }}