/**
 * @author Katharina
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 * Ein Parser für Datalog-EDB-Fakten aus JSON-Strings. Mithilfe des JavaCC Plugin wurde
 * für die angegebene BNF-Grammatik ein Parser generiert.
 */options{  JDK_VERSION = "1.5";  static = false;}PARSER_BEGIN(JSONtoDatalogParser)package javaCCGrammar;public class JSONtoDatalogParser{}PARSER_END(JSONtoDatalogParser)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* Zeichen */{  < marks : "\"" >| < open : "{" >| < end : "}" >| < punkt : ":" >| < string : "\"" (~[ "\"" ])* "\"" >| < number :    (< digit >)+    (      "." (< digit >)+    )? >| < digit : [ "0"-"9" ] >}String getEDBFacts(String type) :{  String edbString = type+ "(";  String value = null;}{  value = start() < EOF >  {    return edbString = edbString + value + ")";  }}String start() :{  String edbString = null;}{  < open >  (    edbString = type("")  )?  < end >  {    return edbString;  }}String type(String edbString) :{  Token valueOfToken = null;  String valueOfOtherToken = null;}{  < string > < punkt >  (    valueOfToken = < string >  | valueOfToken = < number >  )  (    ","    (      valueOfOtherToken = type(edbString)    )  )*  {    String name = null;    if (valueOfToken.kind == string)    {      name = valueOfToken.toString();      name = name.substring(1, name.length() - 1);      name = "'" + name + "'";    }    else name = valueOfToken.toString();    if (valueOfOtherToken != null) return edbString + name + "," + valueOfOtherToken;    else return edbString + name;  }}