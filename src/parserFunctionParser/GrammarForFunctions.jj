/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = false;}PARSER_BEGIN(ParserForFunctions)package parserFunctionParser;import java.io.BufferedReader;import java.io.File;import java.io.FileReader;import java.io.IOException;import java.util.ArrayList;public class ParserForFunctions{  private static String schema = null;  private static ArrayList < String > getAttributeList()  {    final File filename = new File("data/schema");    ArrayList < String > attributelist = new ArrayList < String > ();    if (filename.exists())    {      BufferedReader br = null;      try      {        String sCurrentLine;        br = new BufferedReader(new FileReader(filename));        while ((sCurrentLine = br.readLine()) != null)        {          attributelist.add(sCurrentLine);        }      }      catch (IOException e)      {        e.printStackTrace();      }      finally      {        try        {          if (br != null) br.close();        }        catch (IOException ex)        {          ex.printStackTrace();        }      }    }    return attributelist;  }  private static void setSchema()  {    ArrayList < String > attributelist = getAttributeList();    schema = "Player(";    for (String attribute : attributelist) schema = schema + attribute + ",";    schema = schema.substring(0, schema.length() - 1) + ")";  }  private static String getSchemaWithoutAttribute(String value)  {    ArrayList < String > attributelist = getAttributeList();    String schema = "Player2(";    for (String attribute : attributelist) if (!attribute.equals(value)) schema = schema + attribute + ",";    schema = schema.substring(0, schema.length() - 1) + ")";    return schema;  }}PARSER_END(ParserForFunctions)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN :{  < add : "add" >| < delete : "delete" >| < copy : "copy" >| < move : "move" >| < string : "\"" (~[ "\"" ])* "\"" >}String getFunctionRule() :{  String value = null;}{  value = start() < EOF >  {    return value;  }}String start() :{  setSchema();  String value = null;}{  value = delete()//add()|move()|copy()  {    return value;  }}String add() :{ //to be done}{  {    return null;  }}String delete() :{  Token propertyToken = null;}{  < delete > "Player." propertyToken = < string >  {    String propertyName = propertyToken.toString();    propertyName = propertyName.substring(1, propertyName.length() - 1);    String value = getSchemaWithoutAttribute("?"+propertyName) + " :- " + schema + ", latestPlayer(?id, ?ts).";    return value;  }}String copy() :{}{  {    return null;  }}String move() :{}{  {    return null;  }}