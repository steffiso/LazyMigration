/* ParserForFunctions.java */
/* Generated By:JavaCC: Do not edit this line. ParserForFunctions.java */
package parserFunctionsToDatalog;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.sql.Timestamp;
import java.util.Date;
import java.io.PrintWriter;
import java.io.BufferedWriter;
import java.io.FileWriter;

public class ParserForFunctions implements ParserForFunctionsConstants {

  private static String getCurrentSchema(String kind)
  {
    String currentSchema = null;

    final File filename = new File("data/" + kind + "Schema");

    BufferedReader br = null;
        try {
        br = new BufferedReader(new FileReader(filename));
        currentSchema = null;
                String temp =null;

                while( (temp = br.readLine()) != null)
                {
                        currentSchema = temp;
                }
        }
    catch (IOException e)
    {
      e.printStackTrace();
    }
    finally
    {
      try
      {
        if (br != null) br.close();
      }
      catch (IOException ex)
      {
        ex.printStackTrace();
      }
    }

    return currentSchema;
  }

  private static String getSchemaWithoutAttribute(String kind, String value)
  {
    String currentSchema = getCurrentSchema(kind);
    String tempNewSchema = "";
    String [] attributes = currentSchema.split(",");
    for (String attribute : attributes)
    {
      if (!attribute.equals("?" + value)) tempNewSchema = tempNewSchema + attribute + ",";
    }
    String lastChar = tempNewSchema.substring(tempNewSchema.length() - 1);
    if (lastChar.equals(","))
    {
      tempNewSchema = tempNewSchema.substring(0, tempNewSchema.length() - 1);
    }
    return tempNewSchema;
  }

  private static String getSchemaWithNewAttribute(String kind, String value)
  {
    String currentSchema = getCurrentSchema(kind);
    String newSchema = currentSchema + "," + value;
    return newSchema;
  }

  private static void saveCurrentSchema(String kind, String newSchema){
    String currentSchema = getCurrentSchema(kind);
    if (!currentSchema.equals(newSchema))
    {

                PrintWriter out;
                try {
                        out = new PrintWriter(new BufferedWriter(new FileWriter("data/"+kind + "Schema", true)));
                    out.append(String.format("%n")+newSchema);
                    out.close();
                } catch (IOException e) {
                        // TODO Auto-generated catch block
                        e.printStackTrace();            }

        }

}

  private static String getResidualRules(String kind)
  {
    String value = null;
    String schema = getCurrentSchema(kind);
    String[] secondValues = schema.split(",");
    String secondScheme = "";
    for (String s: secondValues)
    {
                secondScheme = secondScheme + s + "2,";
    }
    value = "legacy" + kind + "(?id,?ts):-" + kind + "(?id, " + schema + ", ?ts)," + kind + "(?id, " +
    //schema.replaceAll("title", "title2").replaceAll("name", "name2").replaceAll("score", "score2") + ",?nts), ?ts < ?nts.\n" +
    secondScheme + "?nts), ?ts < ?nts.\u005cn" + "latest" + kind + "(?id,?ts):-" + kind + "(?id, " + schema + ",?ts), not legacy" + kind + "(?id,?ts).\u005cn";
    return value;
  }

  private static String getTimestamp()
  {
    Date date = new Date();
    Timestamp ts = new Timestamp(date.getTime());
    String time = ts.toString();
    return time;
  }

  final public String getFunctionRule() throws ParseException {String value = null;
    value = start();
    jj_consume_token(0);
{if ("" != null) return value;}
    throw new Error("Missing return statement in function");
  }

  final public String start() throws ParseException {String value = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case add:{
      value = add();
      break;
      }
    case delete:{
      value = delete();
      break;
      }
    case copy:{
      value = copy();
      break;
      }
    case move:{
      value = move();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return value;}
    throw new Error("Missing return statement in function");
  }

  final public String add() throws ParseException {Token kindToken = null;
  Token propertyToken = null;
  Token valueToken = null;
    jj_consume_token(add);
    kindToken = jj_consume_token(string);
    jj_consume_token(10);
    propertyToken = jj_consume_token(string);
    jj_consume_token(11);
    valueToken = jj_consume_token(string);
String propertyName = propertyToken.toString();
    propertyName = propertyName.substring(1, propertyName.length() - 1);
    String propertyValue = valueToken.toString();
    propertyValue = propertyValue.substring(1, propertyValue.length() - 1);
    String kind = kindToken.toString();
    kind = kind.substring(1, kind.length() - 1);
    String currentSchema = getCurrentSchema(kind);
    String newSchema = getSchemaWithNewAttribute(kind, "?" + propertyName);
    String rules = getResidualRules(kind);
    rules = rules + kind + "2(?id," + getSchemaWithNewAttribute(kind, propertyValue) + "," + "?ts" /*getTimestamp() */ + "):-" + kind + "(?id," + currentSchema + ",?ts), latest" + kind + "(?id, ?ts).";
        saveCurrentSchema(kind, newSchema);
    {if ("" != null) return rules;}
    throw new Error("Missing return statement in function");
  }

  final public String delete() throws ParseException {Token kindToken = null;
  Token propertyToken = null;
    jj_consume_token(delete);
    kindToken = jj_consume_token(string);
    jj_consume_token(10);
    propertyToken = jj_consume_token(string);
String propertyName = propertyToken.toString();
    propertyName = propertyName.substring(1, propertyName.length() - 1);
    String kind = kindToken.toString();
    kind = kind.substring(1, kind.length() - 1);
    String schema = getCurrentSchema(kind);
    String newSchema = getSchemaWithoutAttribute(kind, propertyName);
    String rules = getResidualRules(kind);
    rules = rules + kind + "2(?id," + newSchema + ",'" + getTimestamp() + "'):-" + kind + "(?id," + schema + ", ?ts), latest" + kind + "(?id, ?ts).";
        saveCurrentSchema(kind, newSchema);
    {if ("" != null) return rules;}
    throw new Error("Missing return statement in function");
  }

  final public String copy() throws ParseException {Token kindFromToken = null;
  Token kindToToken = null;
  Token propertyToken = null;
  Token conditionFromToken = null;
  Token conditionToToken = null;
    jj_consume_token(copy);
    kindFromToken = jj_consume_token(string);
    jj_consume_token(10);
    propertyToken = jj_consume_token(string);
    jj_consume_token(12);
    kindToToken = jj_consume_token(string);
    jj_consume_token(13);
    kindFromToken = jj_consume_token(string);
    jj_consume_token(10);
    conditionFromToken = jj_consume_token(string);
    jj_consume_token(11);
    kindToToken = jj_consume_token(string);
    jj_consume_token(10);
    conditionToToken = jj_consume_token(string);
String kindFrom = kindFromToken.toString();
    kindFrom = kindFrom.substring(1, kindFrom.length() - 1);
    String kindTo = kindToToken.toString();
    kindTo = kindTo.substring(1, kindTo.length() - 1);
    String attribute = propertyToken.toString();
    attribute = attribute.substring(1, attribute.length() - 1);
    String conditionFrom = conditionFromToken.toString();
    conditionFrom = conditionFrom.substring(1, conditionFrom.length() - 1);
    String conditionTo = conditionToToken.toString();
    conditionTo = conditionTo.substring(1, conditionTo.length() - 1);
    String rules = getResidualRules(kindFrom) + getResidualRules(kindTo);
    String schemaFrom = getCurrentSchema(kindFrom);
    String schemaTo = getCurrentSchema(kindTo);
    String schemaToNew = getSchemaWithNewAttribute(kindTo, "?" + attribute);

    if (conditionFrom.equals("id")) conditionFrom = conditionFrom + "2";
    if (conditionTo.equals("id")) conditionTo = conditionTo + "1";
    String condition = "?" + conditionFrom + " = " + "?" + conditionTo;
    rules = rules + kindTo + "2(?id1, " + schemaToNew + ",'" + getTimestamp() + "')" + ":-"
    + kindTo + "(?id1, " + schemaTo + ",?ts1),latest" + kindTo + "(?id1, ?ts1),"
    + kindFrom + "(?id2, " + schemaFrom + ",?ts2), latest" + kindFrom + "(?id2, ?ts2),"
    + condition + ".\u005cn";
    rules = rules + kindTo + "2(?id1, " + getSchemaWithNewAttribute(kindTo, "''") + ",'" + getTimestamp() + "')" + ":-"
    + kindTo + "(?id1, " + schemaTo + ",?ts1),latest" + kindTo + "(?id1, ?ts1),"
    + " not " + kindFrom + "(?id2, " + schemaFrom + ",?ts2),"
    + condition + ".\u005cn";
    saveCurrentSchema(kindTo, schemaToNew);
    {if ("" != null) return rules;}
    throw new Error("Missing return statement in function");
  }

  final public String move() throws ParseException {Token kindFromToken = null;
  Token kindToToken = null;
  Token propertyToken = null;
  Token conditionFromToken = null;
  Token conditionToToken = null;
    jj_consume_token(move);
    kindFromToken = jj_consume_token(string);
    jj_consume_token(10);
    propertyToken = jj_consume_token(string);
    jj_consume_token(12);
    kindToToken = jj_consume_token(string);
    jj_consume_token(13);
    kindFromToken = jj_consume_token(string);
    jj_consume_token(10);
    conditionFromToken = jj_consume_token(string);
    jj_consume_token(11);
    kindToToken = jj_consume_token(string);
    jj_consume_token(10);
    conditionToToken = jj_consume_token(string);
String kindFrom = kindFromToken.toString();
    kindFrom = kindFrom.substring(1, kindFrom.length() - 1);
    String kindTo = kindToToken.toString();
    kindTo = kindTo.substring(1, kindTo.length() - 1);
    String attribute = propertyToken.toString();
    attribute = attribute.substring(1, attribute.length() - 1);
    String conditionFrom = conditionFromToken.toString();
    conditionFrom = conditionFrom.substring(1, conditionFrom.length() - 1);
    String conditionTo = conditionToToken.toString();
    conditionTo = conditionTo.substring(1, conditionTo.length() - 1);
    String rules = getResidualRules(kindFrom) + getResidualRules(kindTo);
    String schemaFrom = getCurrentSchema(kindFrom);
    String schemaTo = getCurrentSchema(kindTo);
    String schemaFromNew = getSchemaWithoutAttribute(kindFrom, attribute);
    String schemaToNew = getSchemaWithNewAttribute(kindTo, "?" + attribute);
    if (conditionFrom.equals("id")) conditionFrom = conditionFrom + "2";
    if (conditionTo.equals("id")) conditionTo = conditionTo + "1";
    String condition = "?" + conditionFrom + " = " + "?" + conditionTo;
    rules = rules + kindTo + "2(?id1, " + schemaToNew  + ",'" + getTimestamp() + "')" + ":-"
    + kindTo + "(?id1, " + schemaTo + ",?ts1),latest" + kindTo + "(?id1, ?ts1),"
    + kindFrom + "(?id2, " + schemaFrom + ",?ts2), latest" + kindFrom + "(?id2, ?ts2),"
    + condition + ".\u005cn";
    rules = rules + kindTo + "2(?id1, " + getSchemaWithNewAttribute(kindTo, "''") + ",'" + getTimestamp() + "')" + ":-"
    + kindTo + "(?id1, " + schemaTo + ",?ts1),latest" + kindTo + "(?id1, ?ts1),"
    + " not " + kindFrom + "(?id2, " + schemaFrom + ",?ts2),"
    + condition + ".\u005cn";

    rules = rules + kindFrom + "2(?id," + schemaFromNew + ",'" + getTimestamp() + "'):-" + kindFrom + "(?id," + schemaFrom + ", ?ts), latest" + kindFrom + "(?id, ?ts).";

    saveCurrentSchema(kindFrom, schemaFromNew);
    saveCurrentSchema(kindTo, schemaToNew);
    {if ("" != null) return rules;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserForFunctionsTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[1];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1e0,};
   }

  /** Constructor with InputStream. */
  public ParserForFunctions(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserForFunctions(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserForFunctionsTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ParserForFunctions(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserForFunctionsTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ParserForFunctions(ParserForFunctionsTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserForFunctionsTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[14];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 1; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 14; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
