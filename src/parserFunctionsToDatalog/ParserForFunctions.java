/* Generated By:JavaCC: Do not edit this line. ParserForFunctions.java */
package parserFunctionsToDatalog;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.sql.Timestamp;
import java.util.Date;
import java.io.PrintWriter;
import java.io.BufferedWriter;
import java.io.FileWriter;
import database.Database;

public class ParserForFunctions implements ParserForFunctionsConstants {
  private static ArrayList < String > getCurrentSchema(String kind)
  {
    Database db = new Database();
    ArrayList < String > currentSchema = db.getLatestSchema(kind);
    return currentSchema;
  }

  private static String schemaToString(ArrayList < String > schema)
  {
    String schemaStr = "";
    for (String s : schema)
    {
      schemaStr = schemaStr + s + ",";
    }
    schemaStr = schemaStr.substring(0, schemaStr.length() - 1);
    return schemaStr;
  }

  private static int getCurrentSchemaVersion(String kind)
  {
    Database db = new Database();
    int currentSchemaVersion = db.getLatestSchemaVersion(kind);
    return currentSchemaVersion;
  }

  private static ArrayList < String > getNewSchemaDelete(String kind, String value)
  {
    ArrayList < String > currentSchema = getCurrentSchema(kind);
    ArrayList < String > tempNewSchema = new ArrayList < String > ();
    for (String attribute : currentSchema)
    {
      if (!attribute.equals("?" + value)) tempNewSchema.add(attribute);
    }
    return tempNewSchema;
  }

  private static ArrayList < String > getNewSchemaAdd(String kind, String value)
  {
    ArrayList < String > currentSchema = getCurrentSchema(kind);
    currentSchema.add(value);
    return currentSchema;
  }

  private static void saveCurrentSchema(String kind, ArrayList < String > newSchema)
  {
    Database db = new Database();
    ArrayList < String > currentSchema = getCurrentSchema(kind);
    if (!currentSchema.equals(newSchema))
    {
      db.saveCurrentSchema(kind, newSchema);
    }
  }

  private static String getResidualRules(String kind)
  {
    String value = null;
    ArrayList < String > schema = getCurrentSchema(kind);
    int currentVersion = getCurrentSchemaVersion(kind);
    ArrayList < String > secondSchema = new ArrayList < String > ();
    secondSchema.addAll(schema);
    for (int i = 0; i < secondSchema.size(); i++)
    {
      String s = secondSchema.get(i);
      if (!s.equals("?id"))
      {
        secondSchema.set(i, s + "2");
      }
    }
    value = "legacy" + kind + currentVersion + "(?id,?ts):-" + kind + currentVersion + "(" + schemaToString(schema) + ",?ts)," +
    kind + currentVersion + "(" + schemaToString(secondSchema) + ",?nts), ?ts < ?nts.\u005cn" +
    "latest" + kind + currentVersion + "(?id,?ts):-" + kind + currentVersion + "(" + schemaToString(schema) + ",?ts), not legacy" + kind + currentVersion + "(?id,?ts).\u005cn";
    return value;
  }

  private static int getTimestamp()
  {
    Database db = new Database();
    int time = db.getLastTimestamp();
    return time + 1;
  }

  final public String getFunctionRule() throws ParseException {
  String value = null;
    value = start();
    jj_consume_token(0);
    {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public String start() throws ParseException {
  String value = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case add:
      value = add();
      break;
    case delete:
      value = delete();
      break;
    case copy:
      value = copy();
      break;
    case move:
      value = move();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return value;}
    throw new Error("Missing return statement in function");
  }

  final public String add() throws ParseException {
  Token kindToken = null;
  Token propertyToken = null;
  Token valueToken = null;
    jj_consume_token(add);
    kindToken = jj_consume_token(string);
    jj_consume_token(10);
    propertyToken = jj_consume_token(string);
    jj_consume_token(11);
    valueToken = jj_consume_token(string);
    String propertyName = propertyToken.toString();
    propertyName = propertyName.substring(1, propertyName.length() - 1);
    String propertyValue = valueToken.toString();
    propertyValue = propertyValue.substring(1, propertyValue.length() - 1);
    String kind = kindToken.toString();
    kind = kind.substring(1, kind.length() - 1);
    ArrayList < String > currentSchema = getCurrentSchema(kind);
    ArrayList < String > newSchema = getNewSchemaAdd(kind, "?" + propertyName);
    int currentSchemaVersion = getCurrentSchemaVersion(kind);
    int newSchemaVersion = currentSchemaVersion + 1;
    String rules = getResidualRules(kind);
    rules = rules + kind + newSchemaVersion + "(" + schemaToString(getNewSchemaAdd(kind, propertyValue)) + "," + getTimestamp() + "):-" +
    kind + currentSchemaVersion + "(" + schemaToString(currentSchema) + ",?ts), latest" + kind + currentSchemaVersion + "(?id, ?ts).";
    saveCurrentSchema(kind, newSchema);
    {if (true) return rules;}
    throw new Error("Missing return statement in function");
  }

  final public String delete() throws ParseException {
  Token kindToken = null;
  Token propertyToken = null;
    jj_consume_token(delete);
    kindToken = jj_consume_token(string);
    jj_consume_token(10);
    propertyToken = jj_consume_token(string);
    String propertyName = propertyToken.toString();
    propertyName = propertyName.substring(1, propertyName.length() - 1);
    String kind = kindToken.toString();
    kind = kind.substring(1, kind.length() - 1);
    ArrayList < String > schema = getCurrentSchema(kind);
    ArrayList < String > newSchema = getNewSchemaDelete(kind, propertyName);
    int currentVersion = getCurrentSchemaVersion(kind);
    int newVersion = currentVersion + 1;
    String rules = getResidualRules(kind);
    rules = rules + kind + newVersion + "(" + schemaToString(newSchema) + "," + getTimestamp() + "):-" +
    kind + currentVersion + "(" + schemaToString(schema) + ",?ts), latest" + kind + currentVersion + "(?id, ?ts).";
    saveCurrentSchema(kind, newSchema);
    {if (true) return rules;}
    throw new Error("Missing return statement in function");
  }

  final public String copy() throws ParseException {
  Token kindFromToken = null;
  Token kindToToken = null;
  Token propertyToken = null;
  Token conditionFromToken = null;
  Token conditionToToken = null;
    jj_consume_token(copy);
    kindFromToken = jj_consume_token(string);
    jj_consume_token(10);
    propertyToken = jj_consume_token(string);
    jj_consume_token(12);
    kindToToken = jj_consume_token(string);
    jj_consume_token(13);
    kindFromToken = jj_consume_token(string);
    jj_consume_token(10);
    conditionFromToken = jj_consume_token(string);
    jj_consume_token(11);
    kindToToken = jj_consume_token(string);
    jj_consume_token(10);
    conditionToToken = jj_consume_token(string);
    String kindFrom = kindFromToken.toString();
    kindFrom = kindFrom.substring(1, kindFrom.length() - 1);
    String kindTo = kindToToken.toString();
    kindTo = kindTo.substring(1, kindTo.length() - 1);
    String attribute = propertyToken.toString();
    attribute = attribute.substring(1, attribute.length() - 1);
    String conditionFrom = conditionFromToken.toString();
    conditionFrom = conditionFrom.substring(1, conditionFrom.length() - 1);
    String conditionTo = conditionToToken.toString();
    conditionTo = conditionTo.substring(1, conditionTo.length() - 1);
    String rules = getResidualRules(kindFrom) + getResidualRules(kindTo);
    ArrayList < String > schemaFrom = getCurrentSchema(kindFrom);
    ArrayList < String > schemaTo = getCurrentSchema(kindTo);
    ArrayList < String > schemaToNew = getNewSchemaAdd(kindTo, "?" + attribute);
    ArrayList < String > schemaToNew2 = getNewSchemaAdd(kindTo, "''");
    int currentSchemaVersionTo = getCurrentSchemaVersion(kindTo);
    int currentSchemaVersionFrom = getCurrentSchemaVersion(kindFrom);
    int newSchemaVersionTo = currentSchemaVersionTo + 1;
    saveCurrentSchema(kindTo, schemaToNew);
    schemaFrom.set(0, "?id2");
    schemaTo.set(0, "?id1");
    schemaToNew.set(0, "?id1");
    schemaToNew2.set(0, "?id1");
    if (conditionFrom.equals("id")) conditionFrom = conditionFrom + "2";
    if (conditionTo.equals("id")) conditionTo = conditionTo + "1";
    String condition = "?" + conditionFrom + " = " + "?" + conditionTo;
    rules = rules + kindTo + newSchemaVersionTo + "(" + schemaToString(schemaToNew) + "," + getTimestamp() + "):-" + kindTo + currentSchemaVersionTo + "(" + schemaToString(schemaTo) + ",?ts1),latest" + kindTo + currentSchemaVersionTo + "(?id1, ?ts1)," + kindFrom + currentSchemaVersionFrom + "(" + schemaToString(schemaFrom) + ",?ts2), latest" + kindFrom + currentSchemaVersionFrom + "(?id2, ?ts2)," + condition + ".\u005cn";
    rules = rules + kindTo + newSchemaVersionTo + "(" + schemaToString(schemaToNew2) + "," + getTimestamp() + "):-" + kindTo + currentSchemaVersionTo + "(" + schemaToString(schemaTo) + ",?ts1),latest" + kindTo + currentSchemaVersionTo + "(?id1, ?ts1)," + " not " + kindFrom + currentSchemaVersionFrom + "(" + schemaToString(schemaFrom) + ",?ts2)," + condition + ".\u005cn";
    {if (true) return rules;}
    throw new Error("Missing return statement in function");
  }

  final public String move() throws ParseException {
  Token kindFromToken = null;
  Token kindToToken = null;
  Token propertyToken = null;
  Token conditionFromToken = null;
  Token conditionToToken = null;
    jj_consume_token(move);
    kindFromToken = jj_consume_token(string);
    jj_consume_token(10);
    propertyToken = jj_consume_token(string);
    jj_consume_token(12);
    kindToToken = jj_consume_token(string);
    jj_consume_token(13);
    kindFromToken = jj_consume_token(string);
    jj_consume_token(10);
    conditionFromToken = jj_consume_token(string);
    jj_consume_token(11);
    kindToToken = jj_consume_token(string);
    jj_consume_token(10);
    conditionToToken = jj_consume_token(string);
    String kindFrom = kindFromToken.toString();
    kindFrom = kindFrom.substring(1, kindFrom.length() - 1);
    String kindTo = kindToToken.toString();
    kindTo = kindTo.substring(1, kindTo.length() - 1);
    String attribute = propertyToken.toString();
    attribute = attribute.substring(1, attribute.length() - 1);
    String conditionFrom = conditionFromToken.toString();
    conditionFrom = conditionFrom.substring(1, conditionFrom.length() - 1);
    String conditionTo = conditionToToken.toString();
    conditionTo = conditionTo.substring(1, conditionTo.length() - 1);
    String rules = getResidualRules(kindFrom) + getResidualRules(kindTo);
    ArrayList < String > schemaFrom = getCurrentSchema(kindFrom);
    ArrayList < String > schemaTo = getCurrentSchema(kindTo);
    ArrayList < String > schemaFromNew = getNewSchemaDelete(kindFrom, attribute);
    ArrayList < String > schemaToNew = getNewSchemaAdd(kindTo, "?" + attribute);
    ArrayList < String > schemaToNew2 = getNewSchemaAdd(kindTo, "''");
    int currentSchemaVersionFrom = getCurrentSchemaVersion(kindFrom);
    int newSchemaVersionFrom = currentSchemaVersionFrom + 1;
    int currentSchemaVersionTo = getCurrentSchemaVersion(kindTo);
    int newSchemaVersionTo = currentSchemaVersionTo + 1;
    if (conditionFrom.equals("id")) conditionFrom = conditionFrom + "2";
    if (conditionTo.equals("id")) conditionTo = conditionTo + "1";
    saveCurrentSchema(kindFrom, schemaFromNew);
    saveCurrentSchema(kindTo, schemaToNew);
    schemaFrom.set(0, "?id2");
    schemaFromNew.set(0, "?id2");
    schemaTo.set(0, "?id1");
    schemaToNew.set(0, "?id1");
    schemaToNew2.set(0, "?id1");
    String condition = "?" + conditionFrom + " = " + "?" + conditionTo;
    rules = rules + kindTo + newSchemaVersionTo + "(" + schemaToString(schemaToNew) + "," + getTimestamp() + "):-" + kindTo + currentSchemaVersionTo + "(" + schemaToString(schemaTo) + ",?ts1),latest" + kindTo + currentSchemaVersionTo + "(?id1,?ts1)," + kindFrom + currentSchemaVersionFrom + "(" + schemaToString(schemaFrom) + ",?ts2), latest" + kindFrom + currentSchemaVersionFrom + "(?id2,?ts2)," + condition + ".\u005cn";
    rules = rules + kindTo + newSchemaVersionTo + "(" + schemaToString(schemaToNew2) + "," + getTimestamp() + "):-" + kindTo + currentSchemaVersionTo + "(" + schemaToString(schemaTo) + ",?ts1),latest" + kindTo + currentSchemaVersionTo + "(?id1,?ts1)," + " not " + kindFrom + currentSchemaVersionFrom + "(" + schemaToString(schemaFrom) + ",?ts2)," + condition + ".\u005cn";
    rules = rules + kindFrom + newSchemaVersionFrom + "(" + schemaToString(schemaFromNew) + "," + getTimestamp() + "):-"
    + kindFrom + currentSchemaVersionFrom + "(" + schemaToString(schemaFrom) + ",?ts2), latest" + kindFrom + currentSchemaVersionFrom + "(?id2,?ts2).";
    {if (true) return rules;}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserForFunctionsTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[1];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1e0,};
   }

  /** Constructor with InputStream. */
  public ParserForFunctions(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public ParserForFunctions(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserForFunctionsTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public ParserForFunctions(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserForFunctionsTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public ParserForFunctions(ParserForFunctionsTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserForFunctionsTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[14];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 1; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 14; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
