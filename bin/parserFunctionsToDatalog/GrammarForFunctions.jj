/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = false;}PARSER_BEGIN(ParserForFunctions)package parserFunctionsToDatalog;import java.io.BufferedReader;import java.io.File;import java.io.FileReader;import java.io.IOException;import java.util.ArrayList;import java.sql.Timestamp;import java.util.Date;
import java.io.PrintWriter;
import java.io.BufferedWriter;
import java.io.FileWriter;import database.Database;
public class ParserForFunctions{
  private static ArrayList< String > getCurrentSchema(String kind)  {
	Database db = new Database();
      ArrayList< String > currentSchema = db.getLatestSchema(kind);
    return currentSchema;  }

  private static String schemaToString(ArrayList<String > schema)
  {
    String schemaStr = "";
    for (String s: schema)    {
      schemaStr = schemaStr + s + ",";  	}
  	schemaStr = schemaStr.substring(0, schemaStr.length() - 1);
  	return schemaStr;         }

  private static int getCurrentSchemaVersion(String kind)  {
    Database db = new Database();
  
    int currentSchemaVersion = db.getLatestSchemaVersion(kind);
    return currentSchemaVersion;  }  private static ArrayList<String > getNewSchemaDelete(String kind, String value)  {
    ArrayList< String > currentSchema = getCurrentSchema(kind);    ArrayList<String > tempNewSchema = new ArrayList<String >();    for (String attribute : currentSchema)    {      if (!attribute.equals("?" + value)) tempNewSchema.add(attribute);    }    return tempNewSchema;  }  private static ArrayList<String > getNewSchemaAdd(String kind, String value)  {
    ArrayList<String > currentSchema = getCurrentSchema(kind);    currentSchema.add(value);    return currentSchema;  }

  private static void saveCurrentSchema(String kind, ArrayList<String > newSchema)  {	Database db = new Database();    ArrayList<String > currentSchema = getCurrentSchema(kind);    if (!currentSchema.equals(newSchema))    {    	db.saveCurrentSchema(kind,newSchema);			}  }
  private static String getResidualRules(String kind)  {    String value = null;    ArrayList< String > schema = getCurrentSchema(kind);
    ArrayList< String > secondScheme = schema;
    //ArrayList< String > secondScheme = "";
    int currentVersion = getCurrentSchemaVersion(kind);
    for (int i = 0; i<secondScheme.size();i++)
    {
    	String s = secondScheme.get(i);
    	if (!s.equals("?id"))    	{			secondScheme.set(i, s + "2");
		}
    }    value = "legacy" + kind + currentVersion + "(?id,?ts):-" + kind + currentVersion + "(" + schemaToString(schema) + ",?ts)," + kind + currentVersion + "(" + 
    schemaToString(secondScheme) + ",?nts), ?ts < ?nts.\n" + "latest" + kind + currentVersion + "(?id,?ts):-" + kind + currentVersion + "(" + schemaToString(schema) + ",?ts), not legacy" + kind + currentVersion + "(?id,?ts).\n";    return value;  }  private static String getTimestamp()  {    Date date = new Date();    Timestamp ts = new Timestamp(date.getTime());    String time = ts.toString();    return time;  }}PARSER_END(ParserForFunctions)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN :{  < add : "add" >| < delete : "delete" >| < copy : "copy" >| < move : "move" >| < string : "\"" (~[ "\"" ])* "\"" >}String getFunctionRule() :{  String value = null;}{  value = start() < EOF >  {    return value;  }}String start() :{  String value = null;}{  (    value = add()  | value = delete()  | value = copy()  | value = move()  )  {    return value;  }}String add() :{  Token kindToken = null;  Token propertyToken = null;  Token valueToken = null;}{  < add > kindToken = < string > "." propertyToken = < string > "=" valueToken = < string >  {    String propertyName = propertyToken.toString();    propertyName = propertyName.substring(1, propertyName.length() - 1);    String propertyValue = valueToken.toString();    propertyValue = propertyValue.substring(1, propertyValue.length() - 1);    String kind = kindToken.toString();    kind = kind.substring(1, kind.length() - 1);    ArrayList<String > currentSchema = getCurrentSchema(kind);
    ArrayList<String > newSchema = getNewSchemaAdd(kind, "?" + propertyName);
    int currentSchemaVersion = getCurrentSchemaVersion(kind);
    int newSchemaVersion = currentSchemaVersion + 1;    String rules = getResidualRules(kind);    rules = rules + kind + newSchemaVersion + "(" + schemaToString(getNewSchemaAdd(kind, propertyValue)) + ",?ts):-" + kind + currentSchemaVersion + "(" + schemaToString(currentSchema) + ",?ts), latest" + kind + currentSchemaVersion+ "(?id, ?ts).";	saveCurrentSchema(kind, newSchema);
    return rules;  }}String delete() :{  Token kindToken = null;  Token propertyToken = null;}{  < delete > kindToken = < string > "." propertyToken = < string >  {    String propertyName = propertyToken.toString();    propertyName = propertyName.substring(1, propertyName.length() - 1);    String kind = kindToken.toString();    kind = kind.substring(1, kind.length() - 1);    ArrayList<String > schema = getCurrentSchema(kind);
    ArrayList<String > newSchema = getNewSchemaDelete(kind, propertyName);
    int currentVersion = getCurrentSchemaVersion(kind);
    int newVersion = currentVersion + 1;    String rules = getResidualRules(kind);    rules = rules + kind + newVersion + "(" + schemaToString(newSchema) + ",?ts):-" + kind + currentVersion + "(" + schemaToString(schema) + ",?ts), latest" + kind + currentVersion + "(?id, ?ts).";	saveCurrentSchema(kind, newSchema);
    return rules;  }}String copy() :{  Token kindFromToken = null;  Token kindToToken = null;  Token propertyToken = null;  Token conditionFromToken = null;  Token conditionToToken = null;}{  < copy > kindFromToken = < string > "." propertyToken = < string > " to " kindToToken = < string > " where " kindFromToken = < string > "." conditionFromToken = < string > "=" kindToToken = < string > "." conditionToToken = < string >  {    String kindFrom = kindFromToken.toString();    kindFrom = kindFrom.substring(1, kindFrom.length() - 1);    String kindTo = kindToToken.toString();    kindTo = kindTo.substring(1, kindTo.length() - 1);    String attribute = propertyToken.toString();    attribute = attribute.substring(1, attribute.length() - 1);    String conditionFrom = conditionFromToken.toString();    conditionFrom = conditionFrom.substring(1, conditionFrom.length() - 1);    String conditionTo = conditionToToken.toString();    conditionTo = conditionTo.substring(1, conditionTo.length() - 1);    String rules = getResidualRules(kindFrom) + getResidualRules(kindTo);    ArrayList<String > schemaFrom = getCurrentSchema(kindFrom);    ArrayList<String > schemaTo = getCurrentSchema(kindTo);
    ArrayList<String > schemaToNew = getNewSchemaAdd(kindTo, "?" + attribute);
    int currentSchemaVersionTo = getCurrentSchemaVersion(kindTo);
    int currentSchemaVersionFrom = getCurrentSchemaVersion(kindFrom);
    int newSchemaVersionTo = currentSchemaVersionTo + 1;
        if (conditionFrom.equals("id")) conditionFrom = conditionFrom + "2";    if (conditionTo.equals("id")) conditionTo = conditionTo + "1";    String condition = "?" + conditionFrom + " = " + "?" + conditionTo;    rules = rules + kindTo + newSchemaVersionTo + "(?id1, " + schemaToString(schemaToNew) + ",?ts):-"     + kindTo + currentSchemaVersionTo + "(?id1, " + schemaToString(schemaTo) + ",?ts1),latest" + kindTo + currentSchemaVersionTo + "(?id1, ?ts1),"     + kindFrom + currentSchemaVersionFrom + "(?id2, " + schemaToString(schemaFrom) + ",?ts2), latest" + kindFrom + currentSchemaVersionFrom + "(?id2, ?ts2),"     + condition + ".\n";    rules = rules + kindTo + newSchemaVersionTo + "(?id1, " + schemaToString(getNewSchemaAdd(kindTo, "''")) + ",?ts):-"     + kindTo + currentSchemaVersionTo + "(?id1, " + schemaToString(schemaTo) + ",?ts1),latest" + kindTo + currentSchemaVersionTo + "(?id1, ?ts1),"      + " not " + kindFrom + currentSchemaVersionFrom + "(?id2, " + schemaToString(schemaFrom) + ",?ts2),"     + condition + ".\n";
    saveCurrentSchema(kindTo, schemaToNew);    return rules;  }}String move() :{  Token kindFromToken = null;  Token kindToToken = null;  Token propertyToken = null;  Token conditionFromToken = null;  Token conditionToToken = null;}{  < move > kindFromToken = < string > "." propertyToken = < string > " to " kindToToken = < string > " where " kindFromToken = < string > "." conditionFromToken = < string > "=" kindToToken = < string > "." conditionToToken = < string >  {    String kindFrom = kindFromToken.toString();    kindFrom = kindFrom.substring(1, kindFrom.length() - 1);    String kindTo = kindToToken.toString();    kindTo = kindTo.substring(1, kindTo.length() - 1);    String attribute = propertyToken.toString();    attribute = attribute.substring(1, attribute.length() - 1);    String conditionFrom = conditionFromToken.toString();    conditionFrom = conditionFrom.substring(1, conditionFrom.length() - 1);    String conditionTo = conditionToToken.toString();    conditionTo = conditionTo.substring(1, conditionTo.length() - 1);    String rules = getResidualRules(kindFrom) + getResidualRules(kindTo);    ArrayList<String > schemaFrom = getCurrentSchema(kindFrom);    ArrayList<String > schemaTo = getCurrentSchema(kindTo);
    ArrayList<String > schemaFromNew = getNewSchemaDelete(kindFrom, attribute);
    ArrayList<String > schemaToNew = getNewSchemaAdd(kindTo, "?" + attribute);
    int currentSchemaVersionFrom = getCurrentSchemaVersion(kindFrom);
    int newSchemaVersionFrom = currentSchemaVersionFrom + 1;
    int currentSchemaVersionTo = getCurrentSchemaVersion(kindTo);
    int newSchemaVersionTo = currentSchemaVersionTo + 1;
        if (conditionFrom.equals("id")) conditionFrom = conditionFrom + "2";    if (conditionTo.equals("id")) conditionTo = conditionTo + "1";    String condition = "?" + conditionFrom + " = " + "?" + conditionTo;    rules = rules + kindTo + newSchemaVersionTo + "(?id1, " + schemaToString(schemaToNew)  + ",?ts):-"    + kindTo + currentSchemaVersionTo + "(?id1, " + schemaToString(schemaTo) + ",?ts1),latest" + kindTo + currentSchemaVersionTo + "(?id1, ?ts1),"     + kindFrom + currentSchemaVersionFrom + "(?id2, " + schemaToString(schemaFrom) + ",?ts2), latest" + kindFrom + currentSchemaVersionFrom +"(?id2, ?ts2),"     + condition + ".\n";    rules = rules + kindTo + newSchemaVersionTo + "(?id1, " + schemaToString(getNewSchemaAdd(kindTo, "''")) + ",?ts):-"    + kindTo + currentSchemaVersionTo + "(?id1, " + schemaToString(schemaTo) + ",?ts1),latest" + kindTo + currentSchemaVersionTo + "(?id1, ?ts1),"     + " not " + kindFrom + currentSchemaVersionFrom + "(?id2, " + schemaToString(schemaFrom) + ",?ts2),"     + condition + ".\n";    
    rules = rules + kindFrom + newSchemaVersionFrom + "(?id," + schemaToString(schemaFromNew) + ",?ts):-" + kindFrom + currentSchemaVersionFrom + "(?id," + schemaToString(schemaFrom) + ", ?ts), latest" + kindFrom + currentSchemaVersionFrom +"(?id, ?ts).";
    
    saveCurrentSchema(kindFrom, schemaFromNew);
    saveCurrentSchema(kindTo, schemaToNew);    return rules;  }}