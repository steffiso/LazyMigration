/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;
}

PARSER_BEGIN(ParserForGet)
package parserGetToDatalog;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import database.Database;
import database.Schema;

public class ParserForGet
{
  private static ArrayList<String > getCurrentSchema(String kind)
  {
    Database db = new Database();
    Schema currentSchema = db.getLatestSchema(kind);
    ArrayList<String > attributes = currentSchema.getAttributes();

	return attributes;
    
  }
  private static String schemaToString(ArrayList<String > schema)
  {
    String schemaStr = "";
    for (String s: schema)
    {
      schemaStr = schemaStr + s + ",";
  	}
  	schemaStr = schemaStr.substring(0,schemaStr.length() - 1);
  	return schemaStr;       
  }
  
  private static int getCurrentSchemaVersion(String kind)
  {
	Database db = new Database();
	int currentVersion = db.getLatestSchemaVersion(kind);
	return currentVersion;
  }

  private static String getKindRule(String kind)
  {
    String value=null;
    ArrayList<String > schema = getCurrentSchema(kind);
    int currentVersion = getCurrentSchemaVersion(kind);
    
	ArrayList<String > secondSchema = new ArrayList<String >();
	secondSchema.addAll(schema);
    for (int i = 0; i<secondSchema.size();i++)
    {
    	String s = secondSchema.get(i);
    	if (!s.equals("?id"))
    	{
			secondSchema.set(i, s + "2");
		}
    }
    value = "legacy" + kind + currentVersion + "(?id,?ts):-" + kind + currentVersion + "(" + schemaToString(schema) + ",?ts)," + kind + currentVersion + "(" +
    schemaToString(secondSchema) + ",?nts), ?ts < ?nts.\u005cn" + "latest" + kind + currentVersion + "(?id,?ts):-" + kind + currentVersion + "(" + schemaToString(schema) + ",?ts), not legacy" + kind + currentVersion + "(?id,?ts).\u005cn";
    return value;
  }

  public String kindStr;
  public String idStr;
}

PARSER_END(ParserForGet)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* Zeichen */
{
  < marks : "\"" >
| < open : "{" >
| < end : "}" >
| < punkt : ":" >
| < string : "\"" (~[ "\"" ])* "\"" >
| < number :
    (< digit >)+
    (
      "." (< digit >)+
    )? >
| < digit : [ "0"-"9" ] >
| < get : "get" >
} String getRule() :
{
  Token kindToken = null;
  Token idToken = null;
}
{
  < get > kindToken = < string > ".\"id\"=" idToken = < string > 
  {
    String kind = kindToken.toString();    
    kind = kind.substring(1, kind.length() - 1);
    String id = idToken.toString();
    id = id.substring(1, id.length() - 1);
    kindStr=kind;
    idStr=id;
    ArrayList<String > schema = getCurrentSchema(kind);
    int currentVersion = getCurrentSchemaVersion(kind);
    String value = getKindRule(kind);
    
    value = value + "get" + kind + currentVersion + "(" + schemaToString(schema) + ",?ts):-" + kind + currentVersion + "(" + schemaToString(schema) + ", ?ts), latest" + kind + currentVersion +"(?id,?ts),?id="+id+".\n";
 	
    return value;
  }
  < EOF >
}
