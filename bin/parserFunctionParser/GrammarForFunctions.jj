/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = false;}PARSER_BEGIN(ParserForFunctions)package parserFunctionParser;import java.io.BufferedReader;import java.io.File;import java.io.FileReader;import java.io.IOException;import java.util.ArrayList;
import java.sql.Timestamp;
import java.util.Date;public class ParserForFunctions{
private static String getCurrentSchema(String kind){
  String schema = null;
    final File filename = new File("data/" + kind + "Schema");
    BufferedReader br = null;
      try      {        br = new BufferedReader(new FileReader(filename));
        schema = br.readLine();      }      catch (IOException e)      {        e.printStackTrace();      }      finally      {        try        {          if (br != null) br.close();        }        catch (IOException ex)        {          ex.printStackTrace();        }      }
      return schema;
}  private static String getSchemaWithoutAttribute(String kind, String value)  {
    String currentSchema = getCurrentSchema(kind);    String newSchema = kind + "2(?id,";
    String[] attributes = currentSchema.split(",");
    for (String attribute: attributes)    {		if (!attribute.equals(value)) newSchema = newSchema + attribute + ",";
    }
    String lastChar = newSchema.substring(newSchema.length() - 1);
    if (lastChar.equals(","))    {      
    newSchema = newSchema + "'" + getTimestamp() + "')";
    }
    else newSchema = newSchema + ",'" + getTimestamp() + "')";    return newSchema;  }  private static String getSchemaWithNewAttribute(String kind, String value)  {    String currentSchema = getCurrentSchema(kind);
    String newSchema = kind + "2(?id, " + currentSchema + "," + value + ",'" + getTimestamp() + "')";
    return newSchema;  }

  private static String getResidualRules(String kind)
  {
      String value=null;
      String schema = getCurrentSchema(kind);
      value = "legacy" + kind + "(?id,?ts) :- " +kind + "(?id, " + schema + ", ?ts),"+ kind + "(?id, " +
      			schema.replaceAll("title", "title2").replaceAll("name","name2") + ",?nts), ?ts < ?nts.\n" +
      			"latest" + kind + "(?id,?ts) :- " + kind + "(?id, " + schema + ",?ts), not legacy" + kind + "(?id,?ts).\n";

    return value;
  }

  private static String getTimestamp()
  {
    Date date= new Date();
    Timestamp ts = new Timestamp(date.getTime());   
    String time = ts.toString();
    return time;  
  }}PARSER_END(ParserForFunctions)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN :{  < add : "add" >| < delete : "delete" >| < copy : "copy" >| < move : "move" >| < string : "\"" (~[ "\"" ])* "\"" >}String getFunctionRule() :{  String value = null;}{  value = start() < EOF >  {    return value;  }}String start() :{  String value = null;}{  (    value = add()  | value = delete()
  | value = copy()
  | value = move()  )   {    return value;  }}String add() :{  Token kindToken = null;  Token propertyToken = null;  Token valueToken = null;}{  < add > kindToken = < string > "." propertyToken = < string > "=" valueToken = < string >  {    String propertyName = propertyToken.toString();    propertyName = propertyName.substring(1, propertyName.length() - 1);    String propertyValue = valueToken.toString();    propertyValue = propertyValue.substring(1, propertyValue.length() - 1);    String kind = kindToken.toString();    kind = kind.substring(1, kind.length() - 1);
    String schema = getCurrentSchema(kind);    String rules = getResidualRules(kind);
    rules = rules + getSchemaWithNewAttribute(kind, propertyValue) + ":- " + kind + "(?id," + schema + ",?ts), latest" + kind + "(?id, ?ts).";    return rules;  }}String delete() :{
  Token kindToken = null;  Token propertyToken = null;}{  < delete > kindToken = < string > "." propertyToken = < string >  {    String propertyName = propertyToken.toString();    propertyName = propertyName.substring(1, propertyName.length() - 1);
    String kind = kindToken.toString();
    kind = kind.substring(1,kind.length()-1);
    String schema = getCurrentSchema(kind);
    String rules = getResidualRules(kind);    rules = rules + getSchemaWithoutAttribute(kind, "?" + propertyName) + " :- " + kind + "(?id," + schema + ", ?ts), latest" + kind + "(?id, ?ts).";    return rules;  }}String copy() :{
  Token kindFromToken = null;
  Token kindToToken = null;
  Token propertyToken = null;
  Token conditionFromToken = null;
  Token conditionToToken = null;
}{
  < copy > kindFromToken = < string > "." propertyToken = < string > " to " kindToToken = < string > " where " kindFromToken = < string > "." conditionFromToken = < string > "=" kindToToken =< string >"." conditionToToken = < string >  {
    String kindFrom = kindFromToken.toString();
    kindFrom = kindFrom.substring(1, kindFrom.length() - 1);
    String kindTo = kindToToken.toString();
    kindTo = kindTo.substring(1, kindTo.length() - 1);
    String attribute = propertyToken.toString();
    attribute = attribute.substring(1, attribute.length() - 1);
    String conditionFrom = conditionFromToken.toString();
    conditionFrom = conditionFrom.substring(1, conditionFrom.length() - 1);
    String conditionTo = conditionToToken.toString();
    conditionTo = conditionTo.substring(1, conditionTo.length() - 1);
    String rules = getResidualRules(kindFrom) + getResidualRules(kindTo);

	String schemaFrom = getCurrentSchema(kindFrom);
	String schemaTo = getCurrentSchema(kindTo);
	//funktioniert nur für conditionFrom = ID
    rules = rules + kindTo + "2(?id1, "+schemaTo + ",?" + attribute + ",'" + getTimestamp() + "')" + ":- "
    		+ kindTo + "(?id1, " + schemaTo + ",?ts1),latest"+ kindTo + "(?id1, ?ts1),"
    		+ kindFrom + "(?id2, " + schemaFrom + ",?ts2), latest" + kindFrom + "(?id2, ?ts2), ?"
    		+ conditionFrom +"2 = ?" + conditionTo + ".\n";
    		
    rules = rules + kindTo + "2(?id1, "+schemaTo + ",'','" + getTimestamp() + "')" + ":- "
    		+ kindTo + "(?id1, " + schemaTo + ",?ts1),latest"+ kindTo + "(?id1, ?ts1),"
    		+ " not " + kindFrom + "(?id2, " + schemaFrom + ",?ts2), ?"
    		+ conditionFrom + "2 = ?" + conditionTo + ".\n";
    return rules;  }}String move() :{
  Token kindFromToken = null;
  Token kindToToken = null;
  Token propertyToken = null;
  Token conditionFromToken = null;
  Token conditionToToken = null;
}
{
  < move > kindFromToken = < string > "." propertyToken = < string > " to " kindToToken = < string > " where " kindFromToken = < string > "." conditionFromToken = < string > "=" kindToToken =< string >"." conditionToToken = < string >  {
    String kindFrom = kindFromToken.toString();
    kindFrom = kindFrom.substring(1, kindFrom.length() - 1);
    String kindTo = kindToToken.toString();
    kindTo = kindTo.substring(1, kindTo.length() - 1);
    String attribute = propertyToken.toString();
    attribute = attribute.substring(1, attribute.length() - 1);
    String conditionFrom = conditionFromToken.toString();
    conditionFrom = conditionFrom.substring(1, conditionFrom.length() - 1);
    String conditionTo = conditionToToken.toString();
    conditionTo = conditionTo.substring(1, conditionTo.length() - 1);
    String rules = getResidualRules(kindFrom) + getResidualRules(kindTo);

	String schemaFrom = getCurrentSchema(kindFrom);
	String schemaTo = getCurrentSchema(kindTo);
	//funktioniert nur für conditionFrom = ID
	//copy
    rules = rules + kindTo + "2(?id1, "+schemaTo + ",?" + attribute + ",'" + getTimestamp() + "')" + ":- "
    		+ kindTo + "(?id1, " + schemaTo + ",?ts1),latest"+ kindTo + "(?id1, ?ts1),"
    		+ kindFrom + "(?id2, " + schemaFrom + ",?ts2), latest" + kindFrom + "(?id2, ?ts2), ?"
    		+ conditionFrom +"2 = ?" + conditionTo + ".\n";
    		
    rules = rules + kindTo + "2(?id1, "+schemaTo + ",'','" + getTimestamp() + "')" + ":- "
    		+ kindTo + "(?id1, " + schemaTo + ",?ts1),latest"+ kindTo + "(?id1, ?ts1),"
    		+ " not " + kindFrom + "(?id2, " + schemaFrom + ",?ts2), ?"
    		+ conditionFrom + "2 = ?" + conditionTo + ".\n";

	//delete
    rules = rules + getSchemaWithoutAttribute(kindFrom, "?" + attribute) + " :- " + kindFrom + "(?id," + schemaFrom + ", ?ts), latest" + kindFrom + "(?id, ?ts).";
    	    return rules;  }}