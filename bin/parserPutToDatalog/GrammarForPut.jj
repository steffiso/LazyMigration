/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = false;}PARSER_BEGIN(ParserForPut)package parserPutToDatalog;import java.io.BufferedReader;import java.io.File;import java.io.FileReader;import java.io.IOException;import database.Database;import java.util.ArrayList;import database.Schema;public class ParserForPut{  private static int schemaVersion = 0;  private static ArrayList < String > attributes = null;  private static int zaehler = 0;  private static int laenge = 0;

  private static int ts = 0;

  private static boolean hasTS = false;

  private static Database db;  private static void getSchema(String kind, int number)  {    Schema schema = null;    if (number == 0)    {      schema = db.getLatestSchema(kind);    }    else schema = db.getSchema(kind, number);    attributes = schema.getAttributes();    laenge = attributes.size();    schemaVersion = schema.getSchemaversion();  }

  private static int getLastTS()  {
	ts = db.getLastTimestamp();
	return ts;
  }}PARSER_END(ParserForPut)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* Zeichen */{  < marks : "\"" >| < put : "put" >| < open : "{" >| < end : "}" >| < punkt : ":" >| < string : "'" (~[ "'" ])* "'" >| < number :    (< digit >)+    (      "." (< digit >)+    )? >| < digit : [ "0"-"9" ] >| < kindValue : < nameValue > (< nameValue >)* >| < nameValue :    [ "a"-"z" ]  | [ "A"-"Z" ]  | "_" >}String start(Database db) :{  String value = null;  zaehler = 0;
  this.db = db;}{  value = getJSONString() < EOF >  {    return value;  }}String start2(Database db) :{  String value = null;  zaehler = 0;
  this.db = db;}{  value = getJSON() < EOF >  {    return value;  }}String getJSONString() :{  Token kind = null;  Token schemaToken = null;  String value = null;}{  (< put >)? (kind = < kindValue >) (schemaToken = < number >)?  {    if (schemaToken != null)    {      schemaVersion = Integer.parseInt(schemaToken.toString());      getSchema(kind.toString(), schemaVersion);    }    else getSchema(kind.toString(), 0);  }  "("  (    value = listOfValues("")  )?  ")" (".")?  {
    if (hasTS == false) ts = getLastTS() + 1;    String jsonString = "{\"kind\":\"" + kind + "\",\n" + "\"schemaversion\":" + schemaVersion + ",\n" + "\"attributes\":{" + value + "},\n\"ts\":" + Integer.toString(ts) + "}";    return jsonString;  }}String getJSON() :{  Token kind = null;  Token schemaToken = null;  String value = null;}{  (< put >)? (kind = < kindValue >) (schemaToken = < number >)?  {    if (schemaToken != null)    {      schemaVersion = Integer.parseInt(schemaToken.toString());      getSchema(kind.toString(), schemaVersion);    }    else getSchema(kind.toString(), 0);  }  "("  (    value = listOfValues("")  )?  ")" (".")?  {
    if (hasTS == false) ts = getLastTS() + 1;    String jsonString = kind + "{" + value + ", ts\":" + Integer.toString(ts) + "}";    return jsonString;  }}String listOfValues(String value) :{  Token valueOfToken = null;  String valueOfOtherToken = null;  String valueOne = "";  boolean isTS = false;}{  (    valueOfToken = < string >  | valueOfToken = < number >  )  {    String name = null;    if (zaehler < laenge)    {      if (valueOfToken.kind == string)      {
        if (valueOfToken.toString() == null)        {
          name = null;        }
        else        {          	        name = valueOfToken.toString();	        name = name.substring(1, name.length() - 1);	        name = "\"" + name + "\"";
	    }      }      else name = "\"" + valueOfToken.toString() + "\"";      String attributename = attributes.get(zaehler);      valueOne = "\"" + attributename.substring(1, attributename.length()) + "\":" + name;      zaehler++;    }    else if (zaehler == laenge)    {      if (valueOfToken.kind == string)      {       }      else      {        name = "\"" + valueOfToken.toString() + "\"";        isTS = true;
        hasTS = true;        ts = Integer.parseInt(valueOfToken.toString());      }      zaehler++;    }    else    {
      zaehler++;    }  }  (    ","    (      valueOfOtherToken = listOfValues(value)    )  )*  {    if (isTS) return null;
    String nullValues = "";    if (valueOfOtherToken != null && !valueOfOtherToken.equals(""))    {      if (zaehler < laenge)      {        for (int i = zaehler; i < laenge; i++)        {          String attributename = attributes.get(i);          name = null;          nullValues = nullValues  + "\"" + attributename.substring(1, attributename.length()) + "\":" + name +",";        }
        nullValues = nullValues.substring(0,nullValues.length()-1);      }
      if (nullValues.equals(""))      {
        return value + valueOne + ", " + valueOfOtherToken;      }
      else return value + valueOne + ", " + valueOfOtherToken + "," + nullValues;    }    else    {
      if (zaehler < laenge)
      {
        for (int i = zaehler; i < laenge; i++)
        {
          String attributename = attributes.get(i);
          name = null;
          nullValues = nullValues + "\"" + attributename.substring(1, attributename.length()) + "\":" + name +",";
        }
        nullValues = nullValues.substring(0,nullValues.length()-1);
      }
      if (nullValues.equals(""))
      {
        return value + valueOne;      }
      else return value + valueOne + "," + nullValues;
    }  }}
