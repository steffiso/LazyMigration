/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = false;}PARSER_BEGIN(ParserForPut)package parserPutToDatalog;import java.io.IOException;import database.Database;import java.util.ArrayList;import java.util.InputMismatchException;import com.fasterxml.jackson.core.JsonParseException;import com.fasterxml.jackson.databind.JsonMappingException;import database.Schema;public class ParserForPut{  private static int schemaVersion = 0;  private static ArrayList < String > attributes = null;  private static int counter = 0;  private static int length = 0;  private static int ts = 0;  private static boolean hasTS = false;  private static Database db;  private static void getSchema(String kind, int number) throws InputMismatchException, JsonParseException, JsonMappingException, IOException  {    Schema schema = null;    if (number == 0)    {      schema = db.getLatestSchema(kind);    }    else schema = db.getSchema(kind, number);    if (schema != null)    {      attributes = schema.getAttributes();      length = attributes.size();      schemaVersion = schema.getSchemaversion();    }  }  private static int getLastTS() throws JsonParseException, JsonMappingException, IOException  {    ts = db.getLastTimestamp();    return ts;  }}PARSER_END(ParserForPut)SKIP :{  " "| "\r"| "\t"| "\n"}TOKEN : /* Zeichen */{  < marks : "\"" >| < put : "put" >| < open : "{" >| < end : "}" >| < punkt : ":" >| < nullValue : "null" >| < string :    (      "'" (~[ "'" ])* "'"    )  |    (      "\"" (~[ "\"" ])* "\""    ) >| < number :    (< digit >)+    (      "." (< digit >)+    )? >| < digit : [ "0"-"9" ] >| < kindValue : < nameValue > (< nameValue >)* >| < nameValue :    [ "a"-"z" ]  | [ "A"-"Z" ]  | "_" >}String start(Database db) throws InputMismatchException, JsonParseException, JsonMappingException, IOException :{  String value = null;  counter = 0;  this.db = db;  hasTS = false;  schemaVersion = 0;  attributes = null;  length = 0;  ts = 0;}{  value = getJSONString() < EOF >  {    return value;  }}String startJSON(Database db) throws InputMismatchException, JsonParseException, JsonMappingException, IOException :{  String value = null;  counter = 0;  this.db = db;}{  value = getJSON() < EOF >  {    return value;  }}String getJSONString() throws InputMismatchException, JsonParseException, JsonMappingException, IOException :{  Token kind = null;  Token schemaToken = null;  String value = null;  boolean testOverflow = false;}{  (< put >  {    testOverflow = true;  }  )? (kind = < kindValue >) (schemaToken = < number >)?  {    if (schemaToken != null)    {      schemaVersion = Integer.parseInt(schemaToken.toString());      getSchema(kind.toString(), schemaVersion);    }    else getSchema(kind.toString(), 0);    if (attributes == null)    {      throw new InputMismatchException("no info for schema of " + kind.toString() + " found");    }  }  "("  (    value = listOfValues("")  )?  ")" (".")?  {    if (value == null) throw new InputMismatchException("no attributes for " + kind.toString());    if (hasTS == false || (testOverflow && (counter > (length - 1)))) ts = getLastTS() + 1;    String jsonString = "{\"kind\":\"" + kind + "\",\n" + "\"schemaversion\":" + schemaVersion + ",\n" + "\"attributes\":{" + value + "},\n\"ts\":" + Integer.toString(ts) + "}";    return jsonString;  }}String getJSON() throws InputMismatchException, JsonParseException, JsonMappingException, IOException :{  Token kind = null;  Token schemaToken = null;  String value = null;}{  (kind = < kindValue >) (schemaToken = < number >)?  {    if (schemaToken != null)    {      schemaVersion = Integer.parseInt(schemaToken.toString());      getSchema(kind.toString(), schemaVersion);    }    else getSchema(kind.toString(), 0);    if (attributes == null)    {      throw new InputMismatchException("no info for schema of " + kind.toString() + " found");    }  }  "("  (    value = listOfValues("")  )?  ")" (".")?  {    String jsonString = kind + "{" + value + ", \"ts\":" + Integer.toString(ts) + "}";    return jsonString;  }}String listOfValues(String value) :{  Token valueOfToken = null;  String valueOfOtherToken = null;  String valueOne = "";  boolean isTS = false;}{  (    valueOfToken = < string >  | valueOfToken = < number >  | valueOfToken = < nullValue >  )  {    String name = null;    if (counter < length)    {      if (valueOfToken.kind == string)      {        name = valueOfToken.toString();        name = name.substring(1, name.length() - 1);        name = "\"" + name + "\"";      }      else if (valueOfToken.kind == nullValue)      {        name = null;      }      else name = valueOfToken.toString();      String attributename = attributes.get(counter);      valueOne = "\"" + attributename.substring(1, attributename.length()) + "\":" + name;      counter++;    }    else if (counter == length)    {      if (!(valueOfToken.kind == string))      {        isTS = true;        hasTS = true;        ts = Integer.parseInt(valueOfToken.toString());      }      counter++;    }    else    {      counter++;    }  }  (    ","    (      valueOfOtherToken = listOfValues(value)    )  )*  {    if (isTS) return null;    String nullValues = "";    if (valueOfOtherToken != null && !valueOfOtherToken.equals(""))    {      if (counter < length)      {        for (int i = counter; i < length; i++)        {          String attributename = attributes.get(i);          name = null;          nullValues = nullValues + "\"" + attributename.substring(1, attributename.length()) + "\":" + name + ",";        }        nullValues = nullValues.substring(0, nullValues.length() - 1);      }      if (nullValues.equals(""))      {        return value + valueOne + ", " + valueOfOtherToken;      }      else return value + valueOne + ", " + valueOfOtherToken + "," + nullValues;    }    else    {      if (counter < length)      {        for (int i = counter; i < length; i++)        {          String attributename = attributes.get(i);          name = null;          nullValues = nullValues + "\"" + attributename.substring(1, attributename.length()) + "\":" + name + ",";        }        nullValues = nullValues.substring(0, nullValues.length() - 1);      }      if (nullValues.equals(""))      {        return value + valueOne;      }      else return value + valueOne + "," + nullValues;    }  }}